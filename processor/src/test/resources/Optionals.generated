package nl.wernerdegroot.applicatives;

public interface OptionalsMixin {

    <P1, P2, R> java.util.Optional<R> compose(java.util.Optional<? extends P1> first, java.util.Optional<? extends P2> second, java.util.function.BiFunction<? super P1, ? super P2, ? extends R> fn);

    default <P1, P2, R> java.util.function.BiFunction<? super java.util.Optional<? extends P1>, ? super java.util.Optional<? extends P2>, ? extends java.util.Optional<R>> lift(java.util.function.BiFunction<? super P1, ? super P2, ? extends R> fn) {
        return (first, second) ->
                this.compose(first, second, fn);
    }

    class Tuples {

        public static <P1, P2> java.util.Optional<nl.wernerdegroot.applicatives.runtime.Tuple2<P1, P2>> tuple(nl.wernerdegroot.applicatives.OptionalsMixin self, java.util.Optional<? extends P1> first, java.util.Optional<? extends P2> second, int maxSize) {
            return self.compose(first, second, nl.wernerdegroot.applicatives.runtime.FastTuple.withMaxSize(maxSize));
        }

    }

}